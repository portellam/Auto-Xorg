#!/bin/bash

# Dir:          /usr/sbin/Auto-Xorg.sh
# Description:  Generates Xorg for first available VGA device.

# set IFS #
SAVEIFS=$IFS   # Save current IFS (Internal Field Separator)
IFS=$'\n'      # Change IFS to newline char
#

# parameters #
str_input1=`echo $1 | tr '[:upper:]' '[:lower:]'`
#

# set file #
declare -a arr_lspci_k=`lspci -k`
str_file2="/etc/X11/xorg.conf.d/10-Auto-Xorg.conf"
#

# find external PCI device Index values, Bus ID, and drivers #
bool_parseVGA=false
declare -i int_index=0  # reset counter
#

# parse list of PCI devices #
for str_line1 in $arr_lspci_k; do

    # save Info #
    # convert raw string to copy readable by Xorg
    str_thisPCIBusID=(${str_line1:0:7})                 # raw VGA Bus ID
    str_thisPCIBusID=${str_thisPCIBusID:1:2}${str_thisPCIBusID:4:3}                                                 # ab:cd.e   > b:d.e
    str_thisPCIBusID=$(echo $str_thisPCIBusID | cut -d '.' -f 1)":"$(echo $str_thisPCIBusID | cut -d '.' -f 2)      # b:d.e     > b:d:e
    #

    # match VGA device #
    if [[ $str_line1 == *"VGA"* ]]; then

        ((int_index++))                                 # increment only if Bus ID is found
        str_thisVGABusID=$str_thisPCIBusID
        echo "Auto-Xorg: Found Bus ID '$str_thisVGABusID'"
    bool_parseVGA=true

    fi
    #

    # save only if driver is found #
    if [[ $bool_parseVGA == true && $str_line1 == *"Kernel driver in use: "* ]]; then       # line includes PCI driver

        declare -i int_offset=${#str_line1}-22
        str_thisVGADriver=${str_line1:23:$int_offset}     # VGA Driver
        echo "Auto-Xorg: Found driver '$str_thisVGADriver'"
        # save only if not vfio-pci #
        if [[ $str_thisVGADriver != *"vfio-pci"* ]]; then break; fi
        #
        bool_parseVGA=false

    fi
    #

    str_prevLine1=$str_line1    # save previous line for comparison

done
#

# if no VGA device is found, do not write to file normally #
if [[ ! -z $str_thisVGABusID || ! -z $str_thisVGADriver ]]; then

    declare -a arr_XorgConf=("
# Xorg conf generated by Auto-Xorg.service #

Section \"Device\"
Identifier     \"Device0\"
Driver         \"$str_thisVGADriver\"
BusID          \"PCI:$str_thisVGABusID\"
EndSection")

else

    declare -a arr_XorgConf=("
# Xorg conf generated by Auto-Xorg.service #
# WARNING: no VGA device found! Restart Auto-Xorg.service and Display Manager.
# Execute \"lspci -k\" for Bus ID and Driver.

#Section \"Device\"
#Identifier     \"Device0\"
#Driver         \"driver_name\"
#BusID          \"PCI:x:x:x\"
#EndSection
")

fi
#

# write to Xorg #
if [[ -z $str_file2 ]]; then sudo rm $str_file2; fi
for str_line in ${arr_XorgConf[@]}; do echo -e $str_line >> $str_file2; done
echo "Auto-Xorg: Xorg conf modified."
#

# find display manager #
str_DM=`cat /etc/X11/default-display-manager`
str_DM=${str_DM:9:(${#str_DM}-9)}
str_DM=`echo $str_DM | tr '[:upper:]' '[:lower:]'`
#

# restart service #
str_input=`echo $1 | tr '[:upper:]' '[:lower:]'`
if [[ $str_input1 == "dm" && ! -z $str_DM ]]; then
    sudo systemctl enable $str_DM
    sudo systemctl restart $str_DM
fi

if [[ $str_input1 != "dm" && ! -z $str_DM ]]; then
    echo -e "Auto-Xorg: You may restart the active display manager ($str_DM).\nAuto-Xorg: Execute 'systemctl restart $str_DM'."
fi
#

# reset IFS ##
IFS=$SAVEIFS   # Restore original IFS
#

exit 0
